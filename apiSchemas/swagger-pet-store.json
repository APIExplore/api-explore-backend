{
  "components": {
    "schemas": {
      "Order": {
        "xml": {
          "name": "order"
        },
        "type": "object",
        "properties": {
          "petId": {
            "format": "int64",
            "type": "integer",
            "example": 198772
          },
          "quantity": {
            "format": "int32",
            "type": "integer",
            "example": 7
          },
          "id": {
            "format": "int64",
            "type": "integer",
            "example": 10
          },
          "shipDate": {
            "format": "date-time",
            "type": "string"
          },
          "complete": {
            "type": "boolean"
          },
          "status": {
            "description": "Order Status",
            "type": "string",
            "enum": [
              "placed",
              "approved",
              "delivered"
            ],
            "example": "approved"
          }
        }
      },
      "Category": {
        "xml": {
          "name": "category"
        },
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Dogs"
          },
          "id": {
            "format": "int64",
            "type": "integer",
            "example": 1
          }
        }
      },
      "User": {
        "xml": {
          "name": "user"
        },
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "James"
          },
          "password": {
            "type": "string",
            "example": "12345"
          },
          "userStatus": {
            "format": "int32",
            "description": "User Status",
            "type": "integer",
            "example": 1
          },
          "phone": {
            "type": "string",
            "example": "12345"
          },
          "id": {
            "format": "int64",
            "type": "integer",
            "example": 10
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "username": {
            "type": "string",
            "example": "theUser"
          }
        }
      },
      "Address": {
        "xml": {
          "name": "address"
        },
        "type": "object",
        "properties": {
          "zip": {
            "type": "string",
            "example": "94301"
          },
          "city": {
            "type": "string",
            "example": "Palo Alto"
          },
          "street": {
            "type": "string",
            "example": "437 Lytton"
          },
          "state": {
            "type": "string",
            "example": "CA"
          }
        }
      },
      "Customer": {
        "xml": {
          "name": "customer"
        },
        "type": "object",
        "properties": {
          "address": {
            "xml": {
              "name": "addresses",
              "wrapped": true
            },
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            }
          },
          "id": {
            "format": "int64",
            "type": "integer",
            "example": 100000
          },
          "username": {
            "type": "string",
            "example": "fehguy"
          }
        }
      },
      "Tag": {
        "xml": {
          "name": "tag"
        },
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          }
        }
      },
      "Pet": {
        "xml": {
          "name": "pet"
        },
        "type": "object",
        "required": [
          "name",
          "photoUrls"
        ],
        "properties": {
          "photoUrls": {
            "xml": {
              "wrapped": true
            },
            "type": "array",
            "items": {
              "xml": {
                "name": "photoUrl"
              },
              "type": "string"
            }
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "id": {
            "format": "int64",
            "type": "integer",
            "example": 10
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "tags": {
            "xml": {
              "wrapped": true
            },
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tag"
            }
          },
          "status": {
            "description": "pet status in the store",
            "type": "string",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        }
      },
      "ApiResponse": {
        "xml": {
          "name": "##default"
        },
        "type": "object",
        "properties": {
          "code": {
            "format": "int32",
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "requestBodies": {
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      },
      "Pet": {
        "description": "Pet object that needs to be added to the store",
        "content": {
          "application/xml": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          },
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Pet"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "petstore_auth": {
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore.swagger.io/oauth/authorize",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          }
        },
        "type": "oauth2"
      },
      "api_key": {
        "in": "header",
        "name": "api_key",
        "type": "apiKey"
      }
    }
  },
  "servers": [
    {
      "url": "/api/v3"
    }
  ],
  "openapi": "3.0.2",
  "paths": {
    "/pet": {
      "post": {
        "summary": "Add a new pet to the store",
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "requestBody": {
          "description": "Create a new pet in the store",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            }
          },
          "required": true
        },
        "description": "Add a new pet to the store",
        "operationId": "addPet",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "tags": [
          "pet"
        ]
      },
      "put": {
        "summary": "Update an existing pet",
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "requestBody": {
          "description": "Update an existent pet in the store",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            }
          },
          "required": true
        },
        "description": "Update an existing pet by Id",
        "operationId": "updatePet",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          },
          "405": {
            "description": "Validation exception"
          }
        },
        "tags": [
          "pet"
        ]
      }
    },
    "/user/{username}": {
      "get": {
        "summary": "Get user by user name",
        "description": "",
        "operationId": "getUserByName",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "username",
            "description": "The name that needs to be fetched. Use user1 for testing. ",
            "required": true
          }
        ],
        "tags": [
          "user"
        ]
      },
      "delete": {
        "summary": "Delete user",
        "description": "This can only be done by the logged in user.",
        "operationId": "deleteUser",
        "responses": {
          "400": {
            "description": "Invalid username supplied"
          },
          "404": {
            "description": "User not found"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "username",
            "description": "The name that needs to be deleted",
            "required": true
          }
        ],
        "tags": [
          "user"
        ]
      },
      "put": {
        "summary": "Update user",
        "requestBody": {
          "description": "Update an existent user in the store",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "path",
            "name": "username",
            "description": "name that needs to be updated",
            "required": true
          }
        ],
        "tags": [
          "user"
        ]
      }
    },
    "/pet/findByStatus": {
      "get": {
        "summary": "Finds Pets by status",
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        },
        "parameters": [
          {
            "schema": {
              "default": "available",
              "type": "string",
              "enum": [
                "available",
                "pending",
                "sold"
              ]
            },
            "in": "query",
            "explode": true,
            "name": "status",
            "description": "Status values that need to be considered for filter",
            "required": false
          }
        ],
        "tags": [
          "pet"
        ]
      }
    },
    "/user/createWithList": {
      "post": {
        "summary": "Creates list of users with given input array",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "description": "Creates list of users with given input array",
        "operationId": "createUsersWithListInput",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "default": {
            "description": "successful operation"
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "summary": "uploads an image",
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          }
        },
        "description": "",
        "operationId": "uploadFile",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "schema": {
              "format": "int64",
              "type": "integer"
            },
            "in": "path",
            "name": "petId",
            "description": "ID of pet to update",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "additionalMetadata",
            "description": "Additional Metadata",
            "required": false
          }
        ],
        "tags": [
          "pet"
        ]
      }
    },
    "/store/inventory": {
      "get": {
        "summary": "Returns pet inventories by status",
        "security": [
          {
            "api_key": []
          }
        ],
        "description": "Returns a map of status codes to quantities",
        "operationId": "getInventory",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "type": "object"
                }
              }
            }
          }
        },
        "tags": [
          "store"
        ]
      }
    },
    "/user/login": {
      "get": {
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "responses": {
          "200": {
            "headers": {
              "X-Rate-Limit": {
                "schema": {
                  "format": "int32",
                  "type": "integer"
                },
                "description": "calls per hour allowed by the user"
              },
              "X-Expires-After": {
                "schema": {
                  "format": "date-time",
                  "type": "string"
                },
                "description": "date in UTC when token expires"
              }
            },
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "username",
            "description": "The user name for login",
            "required": false
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "password",
            "description": "The password for login in clear text",
            "required": false
          }
        ],
        "tags": [
          "user"
        ]
      }
    },
    "/user": {
      "post": {
        "summary": "Create user",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "description": "This can only be done by the logged in user.",
        "operationId": "createUser",
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/pet/findByTags": {
      "get": {
        "summary": "Finds Pets by tags",
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid tag value"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query",
            "explode": true,
            "name": "tags",
            "description": "Tags to filter by",
            "required": false
          }
        ],
        "tags": [
          "pet"
        ]
      }
    },
    "/store/order": {
      "post": {
        "summary": "Place an order for a pet",
        "requestBody": {
          "content": {
            "application/xml": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            },
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "description": "Place a new order in the store",
        "operationId": "placeOrder",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "405": {
            "description": "Invalid input"
          }
        },
        "tags": [
          "store"
        ]
      }
    },
    "/user/logout": {
      "get": {
        "summary": "Logs out current logged in user session",
        "description": "",
        "operationId": "logoutUser",
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "parameters": [],
        "tags": [
          "user"
        ]
      }
    },
    "/pet/{petId}": {
      "post": {
        "summary": "Updates a pet in the store with form data",
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "description": "",
        "operationId": "updatePetWithForm",
        "responses": {
          "405": {
            "description": "Invalid input"
          }
        },
        "parameters": [
          {
            "schema": {
              "format": "int64",
              "type": "integer"
            },
            "in": "path",
            "name": "petId",
            "description": "ID of pet that needs to be updated",
            "required": true
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "name",
            "description": "Name of pet that needs to be updated"
          },
          {
            "schema": {
              "type": "string"
            },
            "in": "query",
            "name": "status",
            "description": "Status of pet that needs to be updated"
          }
        ],
        "tags": [
          "pet"
        ]
      },
      "get": {
        "summary": "Find pet by ID",
        "security": [
          {
            "api_key": []
          },
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Pet not found"
          }
        },
        "parameters": [
          {
            "schema": {
              "format": "int64",
              "type": "integer"
            },
            "in": "path",
            "name": "petId",
            "description": "ID of pet to return",
            "required": true
          }
        ],
        "tags": [
          "pet"
        ]
      },
      "delete": {
        "summary": "Deletes a pet",
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ],
        "description": "",
        "operationId": "deletePet",
        "responses": {
          "400": {
            "description": "Invalid pet value"
          }
        },
        "parameters": [
          {
            "schema": {
              "type": "string"
            },
            "in": "header",
            "name": "api_key",
            "description": "",
            "required": false
          },
          {
            "schema": {
              "format": "int64",
              "type": "integer"
            },
            "in": "path",
            "name": "petId",
            "description": "Pet id to delete",
            "required": true
          }
        ],
        "tags": [
          "pet"
        ]
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "summary": "Find purchase order by ID",
        "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.",
        "operationId": "getOrderById",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "parameters": [
          {
            "schema": {
              "format": "int64",
              "type": "integer"
            },
            "in": "path",
            "name": "orderId",
            "description": "ID of order that needs to be fetched",
            "required": true
          }
        ],
        "tags": [
          "store"
        ]
      },
      "delete": {
        "summary": "Delete purchase order by ID",
        "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
        "operationId": "deleteOrder",
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Order not found"
          }
        },
        "parameters": [
          {
            "schema": {
              "format": "int64",
              "type": "integer"
            },
            "in": "path",
            "name": "orderId",
            "description": "ID of the order that needs to be deleted",
            "required": true
          }
        ],
        "tags": [
          "store"
        ]
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "info": {
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "description": "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
    "termsOfService": "http://swagger.io/terms/",
    "title": "Swagger Petstore - OpenAPI 3.0",
    "version": "1.0.17"
  },
  "tags": [
    {
      "name": "pet",
      "description": "Everything about your Pets",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "store",
      "description": "Access to Petstore orders",
      "externalDocs": {
        "description": "Find out more about our store",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "user",
      "description": "Operations about user"
    }
  ]
}